{"version":3,"sources":["Vote.js","VoteHistory.js","App.js","serviceWorker.js","index.js"],"names":["Vote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","players","socket","on","object","setState","handleVote","bind","assertThisInitialized","event","emit","target","getAttribute","listItems","key","i","length","push","react_default","a","createElement","List","Item","concat","name","voters","join","Button","data-player","size","onClick","style","marginLeft","Segment","width","marginRight","React","Component","VoteHistory","history","console","log","float","time","string","height","overflow","ListItem","fontStyle","App","io","handleSubmit","reset","clearVotes","data","FormData","get","element","document","getElementById","parentNode","removeChild","window","confirm","className","Form","id","onSubmit","Input","maxLength","placeholder","type","src_Vote","src_VoteHistory","color","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5d61a75.chunk.js","sourcesContent":["import React from \"react\";\nimport { List, Segment, Button } from \"semantic-ui-react\";\n\nclass Vote extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [],\n    };\n    this.props.socket.on(\"updatePlayers\", object => {\n      this.setState({ players: object });\n    });\n    this.handleVote = this.handleVote.bind(this);\n  }\n  handleVote(event) {\n    this.props.socket.emit(\"vote\", event.target.getAttribute(\"data-player\"));\n  }\n  render() {\n    let listItems = [];\n    let key = 0;\n    for (let i = 0; i < this.state.players.length; i++) {\n      listItems.push(\n        <List.Item key={key}>\n          {`${this.state.players[i].name} - (${\n            this.state.players[i].voters.length\n          }) ${this.state.players[i].voters.join(\", \")}`}\n          <Button\n            data-player={this.state.players[i].name}\n            size=\"small\"\n            onClick={this.handleVote}\n            style={{ marginLeft: \"15px\" }}\n          >\n            {\"Vote\"}\n          </Button>\n        </List.Item>,\n      );\n      key++;\n    }\n    return (\n      <div>\n        <h2>{`Players (${this.state.players.length}):`}</h2>\n        <Segment\n          style={{ width: \"50%\", marginLeft: \"auto\", marginRight: \"auto\" }}\n        >\n          <List>{listItems}</List>\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default Vote;\n","import React from \"react\";\nimport { List, Button, Segment, ListItem } from \"semantic-ui-react\";\n\nclass VoteHistory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [],\n    };\n    this.props.socket.on(\"updateHistory\", history => {\n      this.setState({ history: history });\n    });\n  }\n  render() {\n    let history = [];\n    console.log(this.state.history);\n    for (let i = 1; i <= this.state.history.length; i++) {\n      history.push(\n        <List.Item>\n          <span style={{ float: \"left\" }}>\n            {this.state.history[this.state.history.length - i].time}\n          </span>\n          <span>\n            {this.state.history[this.state.history.length - i].string}\n          </span>\n        </List.Item>,\n      );\n    }\n    return (\n      <div>\n        <h2>Voting history:</h2>\n        <Segment\n          style={{\n            width: \"50%\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            height: \"300px\",\n            overflow: \"auto\",\n          }}\n        >\n          <List>\n            {history}\n            <ListItem style={{ fontStyle: \"italic\" }}>\n              {\"This is the beginning of the voting history\"}\n            </ListItem>\n          </List>\n        </Segment>\n      </div>\n    );\n  }\n}\n\nexport default VoteHistory;\n","import React from \"react\";\nimport Vote from \"./Vote\";\nimport io from \"socket.io-client\";\nimport {\n  Input,\n  Form,\n  Button,\n  Header,\n  Label,\n  TextArea,\n} from \"semantic-ui-react\";\nimport VoteHistory from \"./VoteHistory\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      socket: io(),\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.reset = this.reset.bind(this);\n    this.clearVotes = this.clearVotes.bind(this);\n  }\n  handleSubmit(event) {\n    let data = new FormData(event.target);\n    if (data.get(\"name\").length != 0) {\n      this.state.socket.emit(\"addPlayer\", data.get(\"name\"));\n      var element = document.getElementById(\"nameForm\");\n      element.parentNode.removeChild(element);\n    }\n  }\n  clearVotes() {\n    if (window.confirm(\"Are you sure you want to clear votes?\")) {\n      this.state.socket.emit(\"clearVotes\");\n    }\n  }\n  reset() {\n    if (\n      window.confirm(\n        \"Are you sure you want to restart the app? This will kick everyone and erase the voting history.\",\n      )\n    ) {\n      this.state.socket.emit(\"restart\");\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <br />\n        <h1>Mafia Voting</h1>\n        <Form id=\"nameForm\" onSubmit={this.handleSubmit}>\n          <p>\n            (NB: If you've accidentally refreshed the page, just enter the same\n            name again to regain control of that player)\n          </p>\n          <Input\n            maxLength=\"15\"\n            id=\"name\"\n            placeholder=\"Enter your name:\"\n            name=\"name\"\n          />\n          <Button type=\"submit\">{\"Join\"}</Button>\n        </Form>\n        <br />\n        <Vote socket={this.state.socket} />\n        <br />\n        <VoteHistory socket={this.state.socket} />\n        <br />\n        <Button onClick={this.clearVotes} color=\"red\">\n          Clear Votes\n        </Button>\n        <Button onClick={this.reset} color=\"red\">\n          Reset All\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}